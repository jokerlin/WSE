{"batchcomplete": "", "query": {"pages": {"18935488": {"ns": 0, "pageid": 18935488, "revisions": [{"comment": "Fixed \"Binary Software Techniques\"", "*": "'''Reverse engineering''' (RE) is the process of discovering the technological principles of a device or object or system through an [[Abductive reasoning|abductive]] analysis of its structure, function and operation{{Fact|date=July 2007}}. It often involves taking something (e.g. a [[machine|mechanical device]], an [[electronic component]], a [[software]] program) apart and analyzing its workings in detail, usually to try to make a new device or program that does the same thing without copying anything from the original.\n<!--\nRE is mainly used to flout the law?  Don't think so...\nReverse engineering is commonly done to avoid [[copyright]]s on desired functionality, and may be used for avoiding [[patent]] law, though this is a bit risky: patents apply to the functionality, not a specific implementation of it.\n--> \n\nIn the United States and many other countries, even if an artifact or process is protected by [[trade secret]]s, reverse-engineering the artifact or process is often lawful as long as it is obtained legitimately. [[Patent]]s, on the other hand, need a public disclosure of an [[invention]], and therefore patented items do not necessarily have to be reverse engineered to be studied. One common motivation of reverse engineers is to determine whether a competitor's product contains [[patent infringement]]s or [[copyright infringement]]s.\n==Types and applications of reverse engineering==\nAs [[computer-aided design]] has become more popular, reverse engineering has become a viable method to create a 3D virtual model of an existing physical part for use in 3D [[computer-aided design|CAD]], [[computer-aided manufacturing|CAM]], [[computer-aided engineering|CAE]] and other software. The reverse engineering process involves measuring an object and then reconstructing it as a 3D model.  The physical object can be measured using [[3d scanner|3D scanning]] technologies like [[coordinate-measuring machine|CMMs]], [[3d scanner#Triangulation|laser scanners]], [[3d scanner#Structured light|structured light digitizer]]s or [[computed tomography]].  The measured data alone, usually represented as a [[point cloud]], lacks topological information and is therefore often processed and modeled into a more usable format such as a triangular faced mesh, a set of [[NURBS]] surfaces or a CAD model.<!--The point clouds themselves are not compatible with most 3D software, so a-->  Applications like [http://www.innovmetric.com PolyWorks], Imageware, [http://www.Rapidform.com Rapidform] or Geomagic are used to process the point clouds themselves into formats usable in other applications such as 3D CAD, CAM, CAE or visualization.\n\nReverse engineering is often used by [[military]] in order to copy other nations' [[technology]], devices or information, or parts of which, have been obtained by regular troops in the fields or by [[military intelligence|intelligence]] operations. It was often used during the [[Second World War]] and the [[Cold War]]. Well-known examples from WWII include:\n\n* [[Jerry can]]: British and American forces noticed that the Germans had gasoline cans with an excellent design.   They reverse engineered copies of those cans.  The cans were popularly known as ''Jerry cans''.\n* [[Tupolev Tu-4]]: A number of American [[B-29 Superfortress|B-29]] bombers on missions over [[Japan]] were forced to land in the [[Soviet Union|USSR]].  The Soviets, who did not have a similar strategic bomber, decided to copy the B-29.  Within a few years they had developed the Tu-4, a near perfect copy.\n* [[V2 Rocket]]:  Technical documents for the V2 and related technologies were captured by the Western Allies at the end of the war.  Soviet and captured German engineers had to reproduce technical documents and plans, working from captured hardware, in order to make their clone of the rocket, the [[R-1 (missile)|R-1]], which began the postwar Soviet rocket program that led to the [[R-7 Semyorka|R-7]] and the beginning of the [[space race]].\n\nReverse engineering software or hardware systems which is done for the purposes of [[interoperability]] (for example, to support undocumented file formats or undocumented hardware peripherals), is mostly believed to be legal, though patent owners often contest this and attempt to stifle any reverse engineering of their products for any reason.\n\nOn a related note, [[black box testing]] in [[software engineering]] has a lot in common with reverse-engineering. The tester usually has the [[application programming interface|API]], but his goals are to find bugs and undocumented features by bashing the product from outside.\n\nOther purposes of reverse engineering include security auditing, removal of copy protection (\"[[software cracking|cracking]]\"), circumvention of access restrictions often present in [[consumer electronics]], customization of [[embedded systems]] (such as engine management systems), in-house repairs or retrofits, enabling of additional features on low-cost \"crippled\" hardware (such as some graphics card chipsets), or even mere satisfaction of curiosity.\n\nReverse engineering is also used by businesses to bring existing physical geometry into digital product development environments, to make a digital 3D record of their own products or assess competitors' products. It is used to analyze, for instance, how a product works, what it does, what components it consists of, estimate costs, identify potential [[patent]] infringement, etc.\n\n[[Value engineering]] is a related activity also used by business. It involves deconstructing and analysing products, but the objective is to find opportunities for cost cutting.\n\nFinally, reverse engineering often is done because the documentation of a particular device has been lost (or was never written), and the person who built the thing is no longer working at the company.  Integrated circuits often seem to have been designed on obsolete, proprietary systems, which means that the only way to incorporate the functionality into new technology is to reverse-engineer the existing chip and then re-design it.\n\n===Reverse engineering of software===\n{{wikibookspar||Reverse Engineering}}\nThe term \"reverse engineering\" as applied to software means different\nthings to different people, prompting Chikofsky and Cross to write a\npaper researching the various uses and defining a [[taxonomy]]. From\ntheir paper,\n: Reverse engineering is the process of analyzing a subject system to\ncreate representations of the system at a higher level of\nabstraction.<ref>{{cite journal | last=Chikofsky | first=E.J. |\ncoauthors=J.H. Cross II | year=1990 | month=January | title=Reverse\nEngineering and Design Recovery: A Taxonomy in IEEE Software |\njournal=IEEE Computer Society | pages=13\u201317}}</ref>\nIt can also be seen as \"going backwards through the development\ncycle\".<ref>{{cite book | last=Warden | first=R. | title=Software\nReuse and Reverse Engineering in Practice | year=1992 |\npublisher=Chapman & Hall | location=London, England |\npages=283\u2013305}}</ref> In this model, the output of the\nimplementation phase (in source code form) is reverse engineered back\nto the analysis phase, in an inversion of the traditional [[waterfall\nmodel]].\nReverse engineering is a process of examination only: the software\nsystem under consideration is not modified (which would make it\n[[reengineering (software)|reengineering]]). [[Software anti-tamper]]\ntechnology is used to deter both reverse engineering and reengineering\nof proprietary software and software-powered systems.\nIn practice, two main types of reverse engineering emerge. In the first\ncase, source code is already available for the software, but higher\nlevel aspects of the program, perhaps poorly documented or documented\nbut no longer valid, are discovered. In the second case, there is no\nsource code available for the software, and any efforts towards\ndiscovering one possible source code for the software are regarded as\nreverse engineering. This second usage of the term is the one most\npeople are familiar with.\nReverse engineering of software can make use of the [[clean room\ndesign]] technique to avoid infringing copyrights.\n\n===Binary software===\nThis process is sometimes termed ''Reverse Code Engineering'' or\nRCE.<ref>{{cite book | last=Chuvakin | first=Anton |\ncoauthors=Cyrus Peikari | edition=1st ed. | title=Security Warrior |\nurl=http://www.oreilly.com/catalog/swarrior/reviews.html |\naccessdate=2006-05-25 | publisher=O'Reilly | year=2004 |\nmonth=January}}</ref> As an example, decompilation of binaries\nfor the [[Java platform]] can be accomplished using Jad. One famous\ncase of reverse engineering was the first non-[[International Business\nMachines|IBM]] implementation of the [[IBM PC|PC]] [[BIOS]] which\nlaunched the historic [[IBM PC compatible]] industry that has been the\noverwhelmingly dominant computer hardware platform for many years. An\nexample of a group that reverse engineers software for enjoyment is\nCORE which stands for \"Challenges Of Reverse Engineering\".\nIn the [[United States]], the [[Digital Millennium Copyright Act]]\nexempts from the circumvention ban some acts of reverse engineering\naimed at interoperability of file formats and protocols, but judges in\nkey cases have ignored this law, since it is acceptable to circumvent\nrestrictions for use, but not for access.<ref>{{cite web |\nurl=http://www4.law.cornell.edu/uscode/html/uscode17/usc_sec_17_00001201----000-.html\n| title=US Code: Title 17,1201. Circumvention of copyright protection\nsystems | accessdate=2006-05-25}}</ref> Aside from restrictions\non circumvention, reverse engineering of software is protected in the\nU.S. by the [[fair use]] exception in [[copyright|copyright\nlaw]].<ref>See [[Pamela Samuelson]] and Suzanne Scotchmer, \"The\nLaw and Economics of Reverse Engineering\", 111 ''Yale Law Journal''\n1575-1663 (May 2002).</ref>\nThe [[Samba software]], which allows systems that are not running\n[[Microsoft Windows]] systems to share files with systems that are, is\na classic example of software reverse engineering{{Fact|date=April\n2007}}, since the Samba project had to reverse-engineer unpublished\ninformation about how Windows file sharing worked, so that non-Windows\ncomputers could emulate it. The [[Wine (software)|Wine]] project does\nthe same thing for the [[Windows API]], and [[OpenOffice.org]] is one\nparty doing this for the [[Microsoft Office]] file formats. The\n[[ReactOS]] project is even more ambitious in its goals as it strives\nto provide binary (ABI and API) compatibility with the current Windows\nOSes of the NT branch, allowing software and drivers written for\nWindows to run on a clean room reverse engineered GPL open source\ncounterpart.\n===Binary software techniques===\nReverse engineering of software can be accomplished by various methods.\nThe three main groups of software reverse engineering are\n#Analysis through observation of information exchange, most prevalent in protocol reverse engineering, which involves using [[bus analyzer]]s and [[packet sniffer]]s, for example, for accessing a [[computer bus]] or [[computer network]] connection and revealing the traffic data thereon. Bus or network behavior can then be analyzed to produce a stand-alone implementation that mimics that behavior. This is especially useful for reverse engineering [[device driver]]s. Sometimes reverse-engineering on [[embedded system]]s is greatly assisted by tools deliberately introduced by the manufacturer, such as [[JTAG]] ports or other debugging means. In [[Microsoft Windows]], low-level debuggers such as [[SoftICE]] are popular.\n#[[Disassembly]] using a [[disassembler]], meaning the raw [[machine language]] of the program is read and understood in its own terms, only with the aid of machine language [[mnemonic]]s. This works on any computer program but can take quite some time, especially for someone not used to machine code. The [[Interactive Disassembler]] is a particularly popular tool.\n#Decompilation using a [[decompiler]], a process that tries, with varying result, to recreate the source code in some high level language for a program only available in machine code or bytecode.\n\n== Notes ==\n{{reflist}}\n\n==See also==\n*[[Antikythera mechanism]]: a famous example of Reverse engineering.\n*[[Code morphing]]\n*[[Clean room design]]\n*[[Decompiler]]\n*[[Digital Millennium Copyright Act]]\n*[[Interactive Disassembler]]\n*[[Value engineering]]\n*[[List of production topics]]\n*[[Forensic engineering]]\n*[[Paycheck (film)|Paycheck]], a movie about reverse engineering\n*[[Connectix Virtual Game Station]]\n*[[Bus analyzer]]\n*[[Logic analyzer]]\n*[[Knowledge Discovery Metamodel]], a common intermediate representation standard for reverse engineering by OMG\n\n==External links==\n* [http://www.reverse-engineering.net/ Reverse Code Engineering], as entry point for Reverse Code Engineering and the largest Reverse Code Engineering Community\n* [http://www.woodmann.com Reverse Code Engineering: The complete resource for RE of software. Archives of the most important Reverse Code Engineering sites]\n* [http://www.openrce.org OpenRCE: Reverse Engineering Portal]\n* [http://www.eclipse.org/gmt/modisco/ MoDisco: (Model Discovery), an Eclipse Project on Model Driven Reverse Engineering]\n* [http://www.program-transformation.org/Transform/ReverseEngineering Program transformation wiki on Reverse Engineering]\n* [http://www.acm.uiuc.edu/sigmil/RevEng/ Introduction to Reverse Engineering Software], preprint of a book by [[Mike Perry]] and [[Nasko Oskov]].\n* [http://www.ercim.org/publication/Ercim_News/enw44/varady.html Reverse Engineering Shapes], article by [[Tam\u00e1s V\u00e1rady]]\n* [http://www.reteam.org/ Online Resource for Reverse Engineering Software]\n* [http://www.jenkins-ip.com/serv/serv_6.htm Article on legal considerations] by [[David C. Musker]]\n* [http://archives.cnn.com/2001/US/01/25/smithsonian.cold.war/ CNN: How Soviets copied America's best bomber during WWII]\n* [http://w3.umh.ac.be/genlog/SE/SE-contents.html#ReverseEngineering Very good RE definitions from Software Engineering] \n* [http://www.abrg.group.shef.ac.uk/reverb/public/ Reverse engineering the vertebrate brain]\n* [http://adm.omg.org Architecture-Driven Modernization group at OMG]\n* [http://www.elecdesign.com/Articles/Index.cfm?ArticleID=11966 Reverse Engineering Delivers Product Knowledge Aids Technology Spread] - Article in Electronic Design by Dick James, Senior Technology Adviser, Chipworks\n\n[[Category:Engineering]]\n[[Category:Production and manufacturing]]\n[[Category:Software engineering]]\n\n[[ca:Enginyeria inversa]]\n[[cs:Zp\u011btn\u00e9 in\u017een\u00fdrstv\u00ed]]\n[[de:Reverse Engineering]]\n[[es:Ingenier\u00eda inversa]]\n[[fa:\u0645\u0647\u0646\u062f\u0633\u06cc \u0645\u0639\u06a9\u0648\u0633]]\n[[fr:R\u00e9tro-ing\u00e9nierie]]\n[[it:Reingegnerizzazione]]\n[[he:\u05d4\u05e0\u05d3\u05e1\u05d4 \u05d4\u05e4\u05d5\u05db\u05d4]]\n[[ml:\u0d31\u0d3f\u0d35\u0d47\u0d34\u0d4d\u0d38\u0d4d\u200c \u0d0e\u0d1e\u0d4d\u0d1a\u0d3f\u0d28\u0d40\u0d2f\u0d31\u0d3f\u0d02\u0d17\u0d4d\u200c]]\n[[ms:Kejuruteraan undur]]\n[[nl:Reverse engineering]]\n[[ja:\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0]]\n[[pl:Reverse engineering]]\n[[pt:Engenharia reversa]]\n[[ru:\u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430]]\n[[fi:Takaisinmallinnus]]\n[[sv:Reverse engineering]]\n[[th:\u0e27\u0e34\u0e28\u0e27\u0e01\u0e23\u0e23\u0e21\u0e1c\u0e31\u0e19\u0e01\u0e25\u0e31\u0e1a]]\n[[vi:K\u1ef9 ngh\u1ec7 \u0111\u1ea3o ng\u01b0\u1ee3c]]\n[[uk:\u0417\u0432\u043e\u0440\u043e\u0442\u043d\u0430 \u0440\u043e\u0437\u0440\u043e\u0431\u043a\u0430]]\n[[zh:\u9006\u5411\u5de5\u7a0b]]", "timestamp": "2007-09-11T09:17:40Z", "contentformat": "text/x-wiki", "revid": 157118633, "anon": "", "contentmodel": "wikitext", "user": "217.17.37.74", "parentid": 156783470}], "title": "Reverse engineering"}}}}
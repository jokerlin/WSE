{"batchcomplete": "", "query": {"pages": {"18935488": {"ns": 0, "pageid": 18935488, "revisions": [{"comment": "/* External links */", "*": "'''Reverse engineering''' (RE) is the process of discovering the technological principles of a mechanical application through analysis of its structure, function and operation. It often involves taking something (e.g., a [[machine|mechanical device]], an [[electronic component]], a [[software]] program) apart and analyzing its workings in detail, usually with the intention to construct a new device or program that does the same thing without actually copying anything from the original.  The [[verb]] form is '''to reverse-engineer'''.\n<!--\nRE is mainly used to flout the law?  Don't think so...\nReverse engineering is commonly done to avoid [[copyright]]s on desired functionality, and may be used for avoiding [[patent]] law, though this is a bit risky: patents apply to the functionality, not a specific implementation of it.\n-->\n\nA telling analogy of RE is that the research of [[physical law]]s can be seen as reverse-engineering the world itself.\n\nUnder United States law, reverse engineering a [[patent|patented]] item can be [[infringement]]; however, if the artifact or process is protected by [[trade secret]]s instead of by a patent, then reverse-engineering the artifact or process is lawful as long as the artifact or process is obtained legitimately.  In fact, one common motivation of reverse engineering is to determine whether a competitor's product infringes on your patents.\n\n==Types and applications of RE==\nAs [[computer-aided design]] has become more popular, reverse engineering has become a viable method to create a 3D virtual model of an existing physical part for use in 3D [[computer-aided design|CAD]], [[computer-aided manufacturing|CAM]], [[computer-aided engineering|CAE]] and other software. The reverse engineering process involves measuring an object and then reconstructing it as a 3D model.  The physical object can be measured using [[3d scanner|3D scanning]] technologies like [[coordinate-measuring machine|CMMs]], [[laser range scanner|laser scanners]], [[white light digitizer]]s or [[computed tomography]].  The measured data alone, usually represented as a [[point cloud]], lacks topological information and is therefore often processed and modeled into a more usable format such as a triangular faced mesh, a set of NURBS surfaces or a CAD model.<!--The point clouds themselves are not compatible with most 3D software, so a-->  Applications like Imageware, Rapidform or Geomagic are used to process point the point clouds themselves into formats usable in other applications such as 3D CAD, CAM, CAE or visualization.\n\nReverse engineering is often used by [[military]] in order to copy other nations' [[technology]], devices or information, or parts of which, have been obtained by regular troops in the fields or by [[military intelligence|intelligence]] operations. It was often used during the [[Second World War]] and the [[Cold War]]. Well-known examples from WWII include:\n\n* [[Jerry can]]: British and American forces noticed that the Germans had gasoline cans with an excellent design.   They reverse engineered copies of those cans.  The cans were popularly known as ''Jerry cans''.\n* [[Tupolev Tu-4]]: A number of American [[B-29 Superfortress|B-29]] bombers on missions over [[Japan]] were forced to land in the [[Soviet Union|USSR]].  The Soviets, who did not have a similar strategic bomber, decided to copy the B-29.  Within a few years they had developed the Tu-4, a near perfect copy.\n\nReverse engineering software or hardware systems which is done for the purposes of [[interoperability]] (for example, to support undocumented file formats or undocumented hardware peripherals), is mostly believed to be legal, though patent owners often contest this and attempt to stifle any reverse engineering of their products for any reason.\n\nOn a related note, [[black box testing]] in [[software engineering]] has a lot in common with reverse-engineering. The tester usually has the [[application programming interface|API]], but his goals are to find bugs and undocumented features by bashing the product from outside.\n\nOther purposes of reverse engineering include security auditing, removal of copy protection (\"[[software cracking|cracking]]\"), circumvention of access restrictions often present in [[consumer electronics]], customization of [[embedded systems]] (such as engine management systems), in-house repairs or retrofits, enabling of additional features on low-cost \"crippled\" hardware (such as some graphics card chipsets), or even mere satisfaction of curiosity.\n\nReverse engineering is also used by businesses to bring existing physical geometry into digital product development environments, to make a digital 3D record their own products or assess competitors' products. It is used to analyze, for instance, how a product works, what it does, what components it consists of, estimate costs, identify potential [[patent]] infringement, etc.\n\n[[Value engineering]] is a related activity also used by business. It involves deconstructing and analysing products, but the objective is to find opportunities for cost cutting.\n\nFinally, reverse engineering often is done because the documentation of a particular device has been lost (or was never written), and the person who built the thing is no longer working at the company.  Integrated circuits often seem to have been designed on obsolete, proprietary systems, which means that the only way to incorporate the functionality into new technology is to reverse-engineer the existing chip and then re-design it.\n\nReverse engineering is also using to check if some network service may be exploited via network.\n\n==Reverse engineering of software==\n{{wikibookspar||Reverse Engineering}}\nThe term \"reverse engineering\" as applied to software means different things to different people, prompting Chikofsky and Cross to write a paper researching the various uses and defining a [[taxonomy]]. From their paper:\n\n: Reverse engineering is the process of analyzing a subject system to create representations of the system at a higher level of abstraction.<ref>{{cite journal | last=Chikofsky | first=E.J. | coauthors=J.H. Cross II | year=1990 | month=January | title=Reverse Engineering and Design Recovery: A Taxonomy in IEEE Software | journal=IEEE Computer Society | pages=13\u201317}}</ref>\n\nIt can also be seen as \"going backwards through the development cycle\".<ref>{{cite book | last=Warden | first=R. | title=Software Reuse amd Reverse Engineering in Practice | year=1992 | publisher=Chapman &amp; Hall | location=London, England | pages=283\u2013305}}</ref> In this model, the output of the implementation phase (in source code form) is reverse engineered back to the analysis phase, in an inversion of the traditional [[waterfall model]].\n\nReverse engineering is a process of examination only: the software system under consideration is not modified (which would make it [[reengineering (software)|reengineering]]).\n\nIn practice, two main types of reverse engineering emerge. In the first case, source code is already available for the software, but higher level aspects of the program, perhaps poorly documented or documented but no longer valid, are discovered. In the second case, there is no source code available for the software, and any efforts towards discovering one possible source code for the software are regarded as reverse engineering. This second usage of the term is the one most people are familiar with.\n\n===Binary software===\nThis process is sometimes termed ''Reverse Code Engineering'' or RCE.<ref>{{cite book | last=Chuvakin | first=Anton | coauthors=Cyrus Peikari | edition=1st ed. | title=Security Warrior | url=http://www.oreilly.com/catalog/swarrior/reviews.html | accessdate=2006-05-25 | publisher=O'Reilly | year=2004 | month=January}}</ref> As an example, decompilation of binaries for the [[Java platform]] can be accomplished using [[ArgoUML]]. One famous case of reverse engineering was the first non-[[International Business Machines|IBM]] implementation of [[BIOS]] which launched the historic [[IBM PC compatible|PC clone]] industry.\n\nIn the [[United States]], the [[Digital Millennium Copyright Act]] exempts from the circumvention ban some acts of reverse engineering aimed at interoperability of file formats and protocols, but judges in key cases have ignored this law, since it is acceptable to circumvent restrictions for use, but not for access.<ref>{{cite web | url=http://www4.law.cornell.edu/uscode/html/uscode17/usc_sec_17_00001201----000-.html | title=US Code: Title 17,1201. Circumvention of copyright protection systems | accessdate=2006-05-25}}</ref>\n\nThe [[Samba software]], which allows systems that are not running [[Microsoft Windows]] systems to share files with systems that are, is a classic example of software reverse engineering, since the Samba project had to reverse-engineer unpublished information about how Windows file sharing worked, so that non-Windows computers could emulate it. The [[WINE]] project does the same thing for the [[Windows API]], and [[OpenOffice.org]] is one party doing this for the [[Microsoft Office]] file formats.\n\n===Binary software techniques===\nReverse engineering of software can be accomplished by various methods.  The three main groups of software reverse engineering are:\n\n#Analysis through observation of information exchange, most prevalent in protocol reverse engineering, which involve using [[bus analyzer]]s and [[packet sniffer]]s for example for listening into a [[computer bus]] or [[computer network]] connection, revealing the traffic data underneath. Behaviour on the bus or network can then be analyzed for producing a stand-alone implementation that mimics the same behaviour. This is especially good for reverse engineering of [[device driver]]s. Sometimes reverse-engineering on [[embedded system]]s is greatly helped by tools deliberately introduced by the manufacturer, such as [[JTAG]] ports or other debugging means. In [[Microsoft Windows]] low-level debuggers such as [[SoftICE]] are popular.\n#[[Disassembly]] using a [[disassembler]], meaning the raw [[machine language]] of the program is read and understood in its own terms, only with the aid of machine language [[mnemonic]]s. This works on any computer program but can take quite some time, especially for someone not used to machine code. The [[Interactive Disassembler]] is a particularly popular tool.\n#Decompilation using a [[decompiler]], a process that tries, with varying result, to recreate the source code in some high level language for a program only available in machine code or bytecode.\n\n== Notes ==\n<div class=\"references-small\">\n<references/>\n</div>\n\n==See also==\n*[[Antikythera mechanism]]: a famous example of Reverse engineering.\n*[[Clean room design]]\n*[[Decompiler]]\n*[[Digital Millennium Copyright Act]]\n*[[Interactive Disassembler]]\n*[[Value engineering]]\n*[[List of production topics]]\n*[[Forensic engineering]]\n\n==External links==\n* [http://www.program-transformation.org/Transform/ReverseEngineering Program transformation wiki on Reverse Engineering]\n* [http://www.reverse-engineering.net/ Reverse Code Engineering], as entry point for Reverse Code Engineering\n* [http://www.acm.uiuc.edu/sigmil/RevEng/ Introduction to Reverse Engineering Software], preprint of a book by [[Mike Perry]] and [[Nasko Oskov]].\n* [http://www.ercim.org/publication/Ercim_News/enw44/varady.html Reverse Engineering Shapes], article by [[Tam\u00e1s V\u00e1rady]]\n* [http://www.reteam.org/ Online Resource for Reverse Engineering Software]\n* [http://www.jenkins-ip.com/serv/serv_6.htm Article on legal considerations] by [[David C. Musker]]\n* [http://archives.cnn.com/2001/US/01/25/smithsonian.cold.war/ CNN: How Soviets copied America's best bomber during WWII]\n* [http://www.elecdesign.com/Articles/Index.cfm?ArticleID=11966/ Reverse Engineering Delivers Product Knowledge - Aids Technology Spread] an article by [[Dick James]], Senior Technology Analyst. Chipworks\n* [http://w3.umh.ac.be/genlog/SE/SE-contents.html#ReverseEngineering Very good RE definitions from Software Engineering Terminology dictionary]\n[[Category:Engineering]]\n[[Category:Production and manufacturing]]\n[[Category:Software engineering]]\n\n[[ca:Enginyeria inversa]]\n[[cs:Zp\u011btn\u00e9 in\u017een\u00fdrstv\u00ed]]\n[[de:Reverse Engineering]]\n[[es:Ingenier\u00eda inversa]]\n[[fr:R\u00e9tro-ing\u00e9nierie]]\n[[it:Reingegnerizzazione]]\n[[he:\u05d4\u05e0\u05d3\u05e1\u05d4 \u05d4\u05e4\u05d5\u05db\u05d4]]\n[[ms:Kejuruteraan undur]]\n[[nl:Reverse engineering]]\n[[ja:\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0]]\n[[pl:Reverse engineering]]\n[[pt:Engenharia reversa]]\n[[ru:\u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430]]\n[[fi:Takaisinmallinnus]]\n[[sv:Reverse engineering]]\n[[vi:K\u1ef9 ngh\u1ec7 \u0111\u1ea3o ng\u01b0\u1ee3c]]\n[[zh:\u9006\u5411\u5de5\u7a0b]]", "timestamp": "2006-09-09T20:33:35Z", "contentformat": "text/x-wiki", "revid": 74775028, "contentmodel": "wikitext", "user": "Staceydl", "parentid": 74137644}], "title": "Reverse engineering"}}}}
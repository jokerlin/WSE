{"batchcomplete": "", "query": {"pages": {"18935488": {"ns": 0, "pageid": 18935488, "revisions": [{"comment": "Bot: Migrating 1 interwiki links, now provided by [[Wikipedia:Wikidata|Wikidata]] on [[d:Q269608]]", "*": "'''Reverse engineering''' is the [[process (engineering)|process]] of discovering the technological principles of a device, object, or system through analysis of its structure, [[Function (engineering)|function]], and operation.<ref>{{cite book|authors=Eilam, Eldad & Chikofsky, Elliot J.|title=Reversing: secrets of reverse engineering|publisher=John Wiley & Sons|year=2007|isbn=978-0-7645-7481-8|page=3|url=http://books.google.com/books?id=K8vIf99UBYQC&pg=PA3}}</ref> It often involves disassembling something (a [[machine|mechanical device]], [[electronic component]], computer program, or biological, chemical, or organic matter) and analyzing its components and workings in detail\u2014for either purposes of maintenance or to support creation of a new device or program that does the same thing, without using or simply duplicating (without understanding) the original.\n\nReverse engineering has its origins in the analysis of hardware for commercial or military advantage.<ref>{{Cite journal |doi=10.1109/52.43044 |first=E. J. |last=Chikofsky |lastauthoramp=yes |first2=J. H., II |last2=Cross |title=Reverse Engineering and Design Recovery: A Taxonomy |journal=IEEE Software |volume=7 |issue=1 |pages=13\u201317 |year=1990}}</ref> The purpose is to [[Deductive reasoning|deduce]] design decisions from end products with little or no additional knowledge about the procedures involved in the original production. The same techniques are subsequently being researched for application to legacy software systems, not for industrial or defence ends, but rather to replace incorrect, incomplete, or otherwise unavailable documentation.<ref>A Survey of Reverse Engineering and Program Comprehension. Michael L. Nelson, April 19, 1996, ODU CS 551&nbsp;\u2013 Software Engineering Survey. Furthermore, reverse engineering concept is used to modify or change premade .dll files in an operating systems</ref>\n\n==Motivation==\n\nReasons for reverse engineering:\n* '''Interfacing'''. Reverse Engineering can be used when a system is required to interface to another system and how both systems would negotiate is to be established. Such requirements typically exist for [[interoperability]].\n* '''Military or commercial [[espionage]]'''. Learning about an enemy's or competitor's latest research by stealing or capturing a prototype and dismantling it. It may result in development of similar product, or better countermeasures for it.\n* '''Improve documentation shortcomings'''. Reverse engineering can be done when documentation of a system for its design, production, operation or maintenance have shortcomings and original designers are not available to improve it. RE of software can provide the most current documentation necessary for understanding the most current state of a software system\n* '''Obsolescence'''. [[Integrated circuit]]s often seem to have been designed on obsolete, proprietary systems, which means that the only way to incorporate the functionality into new technology is to reverse-engineer the existing chip and then [[Remake (computing)|re-design]] it.\n* '''Software Modernization'''. RE is generally needed in order to understand the 'as is' state of existing or legacy software in order to properly estimate the effort required to migrate system knowledge into a 'to be' state. Much of this may be driven by changing functional, compliance or security requirements.\n* '''Product Security Analysis'''. To examine how a product works, what are specifications of its components, estimate costs and identify potential [[patent infringement]]. Acquiring sensitive data by disassembling and analysing the design of a system component.<ref name=rfc2828>Internet Engineering Task Force RFC 2828 Internet Security Glossary</ref> Another intent may be to remove [[copy protection]], circumvention of access restrictions.\n* '''Bug fixing'''. To [[Unofficial patch|fix]] (or sometimes to enhance) legacy software which is no longer supported by its creators (e.g. [[Abandonware]]).\n* '''Creation of unlicensed/unapproved duplicates''', such duplicates are called sometimes [[Clone (computing)|clones]] in the computing domain.\n* '''Academic/learning purposes'''. RE for learning purposes may be understand the key issues of an unsuccessful design and subsequently improve the design.\n* '''Competitive technical intelligence'''. Understand what one's competitor is actually doing, versus what they say they are doing.\n\n==Reverse engineering of machines==\nAs [[computer-aided design]] (CAD) has become more popular, reverse engineering has become a viable method to create a 3D virtual model of an existing physical part for use in 3D CAD, [[Computer-aided manufacturing|CAM]], [[computer-aided engineering|CAE]] or other software.<ref>{{cite journal|doi=10.1016/S0010-4485(96)00054-1|url=http://ralph.cs.cf.ac.uk/papers/Geometry/RE.pdf|title=Reverse engineering of geometric models\u2013an introduction|year=1997|last1=Varady|first1=T|last2=Martin|first2=R|last3=Cox|first3=J|journal=Computer-Aided Design|volume=29|issue=4|pages=255\u2013268}}</ref> The reverse-engineering process involves measuring an object and then reconstructing it as a 3D model. The physical object can be measured using [[3D scanner|3D scanning]] technologies like [[coordinate-measuring machine|CMMs]], [[3d scanner#Triangulation|laser scanners]], [[3d scanner#Structured light|structured light digitizer]]s, or [[Industrial CT Scanning]] (computed tomography). The measured data alone, usually represented as a [[point cloud]], lacks topological information and is therefore often processed and modeled into a more usable format such as a triangular-faced mesh, a set of [[Nonuniform rational B-spline|NURBS]] surfaces, or a [[computer assisted design|CAD]] model.\n\nReverse engineering is also used by businesses to bring existing physical geometry into digital product development environments, to make a digital 3D record of their own products, or to assess competitors' products. It is used to analyse, for instance, how a product works, what it does, and what components it consists of, estimate costs, and identify potential [[patent]] infringement, etc.\n\n[[Value engineering]] is a related activity also used by businesses. It involves de-constructing and analysing products, but the objective is to find opportunities for cost cutting.\n\n==Reverse engineering of software==\nThe term ''reverse engineering'' as applied to software means different things to different people, prompting Chikofsky and Cross to write a paper researching the various uses and defining a [[Taxonomy (general)|taxonomy]]. From their paper, they state, \"Reverse engineering is the process of analyzing a subject system to create representations of the system at a higher level of abstraction.\"<ref>{{Cite journal \n| last1 = Chikofsky | first1 = E. J. \n| last2 = Cross | first2 = J. H. \n| doi = 10.1109/52.43044 \n| title = Reverse engineering and design recovery: A taxonomy \n| journal = IEEE Software \n| volume = 7 \n| pages = 13\u201317\n| year = 1990\n\n| month = January\n| url = http://win.ua.ac.be/~lore/Research/Chikofsky1990-Taxonomy.pdf\n<!-- multiple other PDF copies are available if this link dies, check Google Scholar -->\n\n}}</ref> It can also be seen as \"going backwards through the development cycle\".<ref>{{cite book | last=Warden | first=R. | title=Software Reuse and Reverse Engineering in Practice | year=1992 | publisher=Chapman & Hall | location=London, England | pages=283\u2013305}}</ref> In this model, the output of the implementation phase (in source code form) is reverse-engineered back to the analysis phase, in an inversion of the traditional [[waterfall model]]. Reverse engineering is a process of examination only: the software system under consideration is not modified (which would make it [[reengineering (software)|re-engineering]]). [[Software anti-tamper]] technology like [[Obfuscation (software)|obfuscation]] is used to deter both reverse engineering and re-engineering of proprietary software and software-powered systems. In practice, two main types of reverse engineering emerge. In the first case, source code is already available for the software, but higher-level aspects of the program, perhaps poorly documented or documented but no longer valid, are discovered. In the second case, there is no source code available for the software, and any efforts towards discovering one possible source code for the software are regarded as reverse engineering. This second usage of the term is the one most people are familiar with. Reverse engineering of software can make use of the [[clean room design]] technique to avoid copyright infringement.\n\nOn a related note, [[black box testing]] in [[software engineering]] has a lot in common with reverse engineering. The tester usually has the [[application programming interface|API]], but their goals are to find bugs and undocumented features by bashing the product from outside.<ref>{{cite book | url=http://www.amazon.co.uk/dp/3659140732 | title=Reverse Engineering and Testing of Black-Box Software Components: by Grammatical Inference techniques | publisher=LAP LAMBERT Academic Publishing | author=Shahbaz, Muzammil | year=2012 | isbn=978-3659140730}}</ref>\n\nOther purposes of reverse engineering include security auditing, removal of copy protection (\"[[software cracking|cracking]]\"), circumvention of access restrictions often present in [[consumer electronics]], customization of [[embedded systems]] (such as engine management systems), in-house repairs or retrofits, enabling of additional features on low-cost \"crippled\" hardware (such as some graphics card chip-sets), or even mere satisfaction of curiosity.\n\n===Binary software===\nThis process is sometimes termed ''Reverse Code Engineering'', or RCE.<ref>{{cite book | last=Chuvakin | first=Anton | coauthors=Cyrus Peikari | edition=1st | title=Security Warrior |accessdate=2006-05-25 | publisher=O'Reilly | year=2004 | month=January}}</ref> As an example, decompilation of binaries for the [[Java platform]] can be accomplished using Jad. One famous case of reverse engineering was the first non-[[International Business Machines|IBM]] implementation of the [[IBM PC|PC]] [[BIOS]] which launched the historic [[IBM PC compatible]] industry that has been the overwhelmingly dominant computer hardware platform for many years. Reverse engineering of software is protected in the U.S. by the [[fair use]] exception in [[copyright|copyright law]].<ref>{{Cite journal |doi=10.2307/797533 |authorlink=Pamela Samuelson |first=Pamela |last=Samuelson |lastauthoramp=yes |first2=Suzanne |last2=Scotchmer |title=The Law and Economics of Reverse Engineering |volume=111 |journal=[[Yale Law Journal]] |issue= 7|pages=1575\u20131663 |year=2002 |url=http://www.yalelawjournal.org/the-yale-law-journal/content-pages/the-law-and-economics-of-reverse-engineering/|jstor=797533 }}</ref> The [[Samba software]], which allows systems that are not running [[Microsoft Windows]] systems to share files with systems that are, is a classic example of software reverse engineering,<ref>{{cite web | title=Samba: An Introduction | url=http://www.samba.org/samba/docs/SambaIntro.html | date=2001-11-27 | accessdate=2009-05-07}}</ref> since the Samba project had to reverse-engineer unpublished information about how Windows file sharing worked, so that non-Windows computers could emulate it. The [[Wine (software)|Wine]] project does the same thing for the [[Windows API]], and [[OpenOffice.org]] is one party doing this for the [[Microsoft Office]] file formats. The [[ReactOS]] project is even more ambitious in its goals, as it strives to provide binary (ABI and API) compatibility with the current Windows OSes of the NT branch, allowing software and drivers written for Windows to run on a clean-room reverse-engineered [[GPL]] free software or open-source counterpart.  [[WindowsSCOPE]] allows for reverse-engineering the full contents of a Windows system's live memory including a binary-level, graphical reverse engineering of all running processes.\n\n====Binary software techniques====\nReverse engineering of software can be accomplished by various methods.\nThe three main groups of software reverse engineering are\n#Analysis through observation of information exchange, most prevalent in protocol reverse engineering, which involves using [[bus analyzer]]s and [[packet sniffer]]s, for example, for accessing a [[computer bus]] or [[computer network]] connection and revealing the traffic data thereon. Bus or network behavior can then be analyzed to produce a stand-alone implementation that mimics that behavior. This is especially useful for reverse engineering [[device driver]]s. Sometimes, reverse engineering on [[embedded system]]s is greatly assisted by tools deliberately introduced by the manufacturer, such as [[JTAG]] ports or other debugging means. In [[Microsoft Windows]], low-level debuggers such as [[SoftICE]] are popular.\n#[[Disassembly]] using a [[disassembler]], meaning the raw [[machine language]] of the program is read and understood in its own terms, only with the aid of machine-language [[mnemonic]]s. This works on any computer program but can take quite some time, especially for someone not used to machine code. The [[Interactive Disassembler]] is a particularly popular tool.\n#Decompilation using a [[decompiler]], a process that tries, with varying results, to recreate the source code in some high-level language for a program only available in machine code or [[bytecode]].\n\n===Classification===\nSoftware classification is the process of identifying similarities between different software binaries (for example, two different versions of the same binary) used to detect code relations between software samples. This task was traditionally done manually for several reasons (such as patch analysis for vulnerability detection and [[copyright infringement]]) but nowadays can be done somewhat automatically for large amounts of samples.\n\nThis method is being used mostly for long and thorough Reverse Engineering tasks (complete analysis of a complex algorithm or big piece of software). In general, [[Statistical classification]] is considered to be a hard problem and this is also true for software classification, therefore there aren't many solutions/tools that handle this task well. There are two significant tools that do binary comparison at the function level: BinDiff from zynamics<ref>http://www.zynamics.com/bindiff.html</ref>(acquired by Google) and Rematch from Retheos.<ref>http://www.retheos.com</ref>\n\n==Source code==\nA number of [[Unified Modeling Language|UML]] tools refer to the process of importing and analysing source code to generate UML diagrams as \"reverse engineering\". See [[List of UML tools]].\n\nAlthough UML is one approach to providing \"reverse engineering\" more recent advances in international standards activities have resulted in the development of the [[Knowledge Discovery Metamodel]] (KDM).  This standard delivers an ontology for the intermediate (or abstracted) representation of programming language constructs and their interrelationships.  An [[Object Management Group]] Standard (on its way to becoming an ISO standard as well), KDM has started to take hold in industry with the development of tools and analysis environments which can deliver the  extraction and analysis of source, binary, and byte code.  For source code analysis, KDM's granular standards' architecture enables the extraction of software system flows (data, control, & call maps), architectures, and business layer knowledge (rules, terms, process). The standard enables the use of a common data format (XMI) enabling the correlation of the various layers of system knowledge for either detailed analysis (e.g. root cause, impact) or derived analysis (e.g. business process extraction).  Although efforts to represent language constructs can be never-ending given the number of languages, the continuous evolution of software languages and the development of new languages, the standard does allow for the use of extensions to support the broad language set as well as evolution.  KDM is compatible with UML, BPMN, RDF and other standards enabling migration into other environments and thus leverage system knowledge for efforts such as software system transformation and enterprise business layer analysis.\n\n==Reverse engineering of protocols==\n\n[[Communications protocol|Protocols]] are sets of rules that describe message formats and how messages are exchanged (i.e., the protocol [[Finite-state machine|state-machine]]). Accordingly, the problem of protocol reverse-engineering can be partitioned into two subproblems; message format and state-machine reverse-engineering.\n\nThe message formats have traditionally been reverse-engineered through a tedious manual process, which involved analysis of how protocol implementations process messages, but recent research proposed a number of automatic solutions.<ref>W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic protocol reverse engineering from network traces. In Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium, pp. 1\u201314.</ref><ref>W. Cui, M. Peinado, K. Chen, H. J. Wang, and L. Ir\u00fan-Briz. Tupni: Automatic reverse engineering of input formats. In Proceedings of the 15th ACM Conference on Computer and Communications Security, pp. 391\u2013402. ACM, Oct 2008.</ref><ref name=\"M. Comparetti, G. Wondracek pages 110-125\">P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda. Prospex: Protocol specification extraction. In Proceedings of the 2009 30th IEEE Symposium on Security and Privacy, pp. 110\u2013125, Washington, 2009. IEEE Computer Society.</ref> Typically, these automatic approaches either group observed messages into clusters using various [[Cluster analysis|clustering analyses]], or emulate the protocol implementation tracing the message processing.\n\nThere has been less work on reverse-engineering of state-machines of protocols. In general, the protocol state-machines can be learned either through a process of [[offline learning]], which passively observes communication and attempts to build the most general state-machine accepting all observed sequences of messages, and [[online machine learning|online learning]], which allows interactive generation of probing sequences of messages and listening to responses to those probing sequences. In general, offline learning of small state-machines is known to be [[NP-complete]],<ref>{{cite journal|doi=10.1016/S0019-9958(78)90562-4|title=Complexity of automaton identification from given data|year=1978|last1=Gold|first1=E|journal=Information and Control|volume=37|issue=3|pages=302\u2013320 }}</ref> while online learning can be done in polynomial time.<ref>{{cite journal|author=D. Angluin|title= Learning regular sets from queries and counterexamples|doi=10.1016/0890-5401(87)90052-6|journal= Information and Computation|volume= 75|issue=2|pages=87\u2013106|year=1987}}</ref> An automatic offline approach has been demonstrated by Comparetti et al.<ref name=\"M. Comparetti, G. Wondracek pages 110-125\"/> and an online approach very recently by Cho et al.<ref>C.Y. Cho, D. Babic, R. Shin, and D. Song. [http://www.domagoj-babic.com/index.php/Pubs/CCS10botnets Inference and Analysis of Formal Models of Botnet Command and Control Protocols], 2010 ACM Conference on Computer and Communications Security.</ref>\n\nOther components of typical protocols, like encryption and hash functions, can be reverse-engineered automatically as well. Typically, the automatic approaches trace the execution of protocol implementations and try to detect buffers in memory holding unencrypted packets.<ref>[http://bitblaze.cs.berkeley.edu/papers/polyglot_ccs07_av.pdf Polyglot: automatic extraction of protocol message format using dynamic binary analysis]. J. Caballero, H. Yin, Z. Liang, and D. Song. Proceedings of the 14th ACM conference on Computer and communications security, p. 317-329.</ref>\n\n==Reverse engineering of integrated circuits/smart cards==\nReverse engineering is an invasive and destructive form of analyzing a smart card. The attacker grinds away layer after layer of the smart card and takes pictures with an [[electron microscope]]. With this technique, it is possible to reveal the complete hardware and software part of the smart card. The major problem for the attacker is to bring everything into the right order to find out how everything works. Engineers try to hide keys and operations by mixing up memory positions, for example, [[bus scrambling]].<ref>Wolfgang Rankl, Wolfgang Effing, Smart Card Handbook (2004)</ref><ref>T. Welz: [http://www.crypto.rub.de/its_seminar_ws0708.html Smart cards as methods for payment] (2008), Seminar ITS-Security Ruhr-Universit\u00e4t Bochum</ref>\nIn some cases, it is even possible to attach a probe to measure voltages while the smart card is still operational. Engineers employ sensors to detect and prevent this attack.<ref>David C. Musker: [http://www.jenkins.eu/articles-general/reverse-engineering.asp Protecting & Exploiting Intellectual Property in Electronics], IBC Conferences, 10 June 1998</ref> This attack is not very common because it requires a large investment in effort and special equipment that is generally only available to large chip manufacturers. Furthermore, the payoff from this attack is low since other security techniques are often employed such as shadow accounts.\n\n==Reverse engineering for military applications==\nReverse engineering is often used by people in order to copy other nations' technologies, devices, or information that have been obtained by regular troops in the fields or by [[military intelligence|intelligence]] operations. It was often used during the [[Second World War]] and the [[Cold War]]. Well-known examples from WWII and later include:\n* [[Jerry can]]: British and American forces noticed that the Germans had gasoline cans with an excellent design. They reverse-engineered copies of those cans. The cans were popularly known as \"Jerry cans\".\n*[[Panzerschreck]]: The Germans captured an American [[Bazooka]] during World War II, and reverse engineered it to create the larger Panzerschreck.\n* [[Tupolev Tu-4]]: Three American [[B-29 Superfortress|B-29]] bombers on missions over [[Japan]] were forced to land in the [[Soviet Union|USSR]]. The Soviets, who did not have a similar strategic bomber, decided to copy the B-29. Within a few years, they had developed the Tu-4, a near-perfect copy.\n* [[V-2]] rocket: Technical documents for the V2 and related technologies were captured by the Western Allies at the end of the war. On American side led reverse engineering via operation Paperclip to the development of the [[PGM-11 Redstone]] rocket.<ref>{{cite web|url=http://www.centennialofflight.net/essay/Dictionary/REDSTONE/DI149.htm |title=Redstone rocket |publisher=centennialofflight.net |date= |accessdate=2010-04-27}}</ref> On Soviet side Soviet and captured German engineers had to reproduce technical documents and plans, working from captured hardware, in order to make their clone of the rocket, the [[R-1 (missile)|R-1]], which began the postwar Soviet rocket program that led to the [[R-7 Semyorka|R-7]] and the beginning of the [[space race]].\n* [[Vympel K-13|K-13/R-3S]] missile ([[NATO reporting name]] '''AA-2 Atoll'''), a Soviet reverse-engineered copy of the [[AIM-9 Sidewinder]], was made possible after a Taiwanese AIM-9B hit a Chinese [[MiG-17]] without exploding. The missile became lodged within the airframe, and the pilot returned to base with what Russian scientists would describe as a university course in missile development.\n* [[BGM-71 TOW]] Missile: In May 1975, negotiations between Iran and Hughes Missile Systems on co-production of the TOW and Maverick missiles stalled over disagreements in the pricing structure, the subsequent [[1979 revolution]] ending all plans for such co-production. Iran was later successful in reverse-engineering the missile and are currently producing their own copy: the [[Toophan]].\n* China has [[Intellectual property in the People's Republic of China|reversed engineered many examples]] of Western and Russian hardware, from fighter aircraft to missiles and [[HMMWV]] cars.\n* During the Second World War, Polish and British cryptographers studied captured German [[Cryptanalysis of the Enigma|\"Enigma\"]] message encryption machines for weaknesses. Their operation was then simulated on electro-mechanical devices called \"[[Bombe]]s\" that tried all the possible scrambler settings of the \"Enigma\" machines to help break the coded messages sent by the Germans.\n* Also during the Second World War, British scientists analyzed and defeated a [[Battle of the Beams|series of increasingly sophisticated radio navigation systems]] being used by the German Luftwaffe to perform guided bombing missions at night. The British countermeasures to this system were so effective that in some cases German aircraft were led by signals to land at RAF bases, believing they were back in German territory.\n\n==Legality==\n\n===United States===\nIn the United States even if an artifact or process is protected by [[trade secret]]s, reverse-engineering the artifact or process is often lawful as long as it is obtained legitimately.<ref>[https://www.asme.org/career-education/articles/management-professional-practice/trade-secrets-101 \"Trade Secrets 101,\" Feature Article, March 2011]. ASME. Retrieved on 2013-10-31.</ref> [[Patent]]s, on the other hand, need a public disclosure of an [[invention]], and therefore, patented items do not necessarily have to be reverse-engineered to be studied. (However, an item produced under one or more patents could also include other technology that is not patented and not disclosed.) One common motivation of reverse engineering is to determine whether a competitor's product contains [[patent infringement]]s or [[copyright infringement]]s.\n\nThe reverse engineering of software in the US is generally a breach of contract as most [[EULA]]s specifically prohibit it, and courts have found such contractual prohibitions to override the copyright law which expressly permits it; see [[Bowers v. Baystate Technologies]].<ref>[http://www.utsystem.edu/ogc/intellectualproperty/baystatevbowersdiscussion.htm Baystate v. Bowers Discussion]. Utsystem.edu. Retrieved on 2011-05-29.</ref><ref>Gross, Grant. (2003-06-26) [http://www.infoworld.com/d/developer-world/contract-case-could-hurt-reverse-engineering-337 Contract case could hurt reverse engineering | Developer World]. InfoWorld. Retrieved on 2011-05-29.</ref>\n\nSec. 103(f) of the [[Digital Millennium Copyright Act|DMCA]] ([http://www4.law.cornell.edu/uscode/html/uscode17/usc_sec_17_00001201----000-.html 17 U.S.C. \u00a7 1201 (f)]) says that if one legally obtains a program that is protected, they are allowed to reverse-engineer and circumvent the protection to achieve interoperability between computer programs (i.e., the ability to exchange and make use of information). The section states:\n\n<blockquote>\n(f) Reverse Engineering.\u2014<br /><br />\n (1) Notwithstanding the provisions of subsection (a)(1)(A), a person who has lawfully obtained the right to use a copy of a computer program may circumvent a technological measure that effectively controls access to a particular portion of that program for the sole purpose of identifying and analyzing those elements of the program that are necessary to achieve interoperability of an independently created computer program with other programs, and that have not previously been readily available to the person engaging in the circumvention, to the extent any such acts of identification and analysis do not constitute infringement under this title.<br /><br />\n (2) Notwithstanding the provisions of subsections (a)(2) and (b), a person may develop and employ technological means to circumvent a technological measure, or to circumvent protection afforded by a technological measure, in order to enable the identification and analysis under paragraph (1), or for the purpose of enabling interoperability of an independently created computer program with other programs, if such means are necessary to achieve such interoperability, to the extent that doing so does not constitute infringement under this title.<br /><br />\n (3) The information acquired through the acts permitted under paragraph (1), and the means permitted under paragraph (2), may be made available to others if the person referred to in paragraph (1) or (2), as the case may be, provides such information or means solely for the purpose of enabling interoperability of an independently created computer program with other programs, and to the extent that doing so does not constitute infringement under this title or violate applicable law other than this section.<br /><br />\n (4) For purposes of this subsection, the term \u300cinteroperability\u300d means the ability of computer programs to exchange information, and of such programs mutually to use the information which has been exchanged. \n</blockquote>\n\n===European Union===\nArticle 6 of the 1991 EU [[Computer Programs Directive]] allows reverse engineering for the purposes of interoperability, but prohibits it for the purposes of creating a competing product, and also prohibits the public release of information obtained through reverse engineering of software.<ref>[http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:31991L0250:EN:HTML Council Directive 91/250/EEC of 14 May 1991 on the legal protection of computer programs]. Eur-lex.europa.eu. Retrieved on 2011-05-29.</ref><ref>{{cite book|author=P. B. Hugenholtz |title=The future of the public domain: identifying the commons in information law |url=http://books.google.com/books?id=KJmNGglq0nwC&pg=PA321 |accessdate=29 May 2011 |year=2006 |publisher=Kluwer Law International |isbn=978-90-411-2435-7 |pages=321\u2013}}</ref><ref>[http://www.jenkins.eu/articles-general/reverse-engineering.asp#a9 Jenkins | Trade Mark and Patent Attorneys | Reverse Engineering]. Jenkins.eu. Retrieved on 2011-05-29.</ref>\n\nIn 2009, the EU Computer Program Directive was superseded and the directive now states:<ref>[http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=OJ:L:2009:111:0016:01:EN:HTML DIRECTIVE 2009/24/EC OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL of 23 April 2009 on the legal protection of computer programs]</ref>\n<blockquote>\n(15) The unauthorised reproduction, translation, adaptation or transformation of the form of the code in which a copy of a computer program has been made available constitutes an infringement of the exclusive rights of the author. Nevertheless, circumstances may exist when such a reproduction of the code and translation of its form are indispensable to obtain the necessary infor\u00admation to achieve the interoperability of an indepen\u00addently created program with other programs. It has therefore to be considered that, in these limited circum\u00adstances only, performance of the acts of reproduction and translation by or on behalf of a person having a right to use a copy of the program is legitimate and compatible with fair practice and must therefore be deemed not to require the authorisation of the right\u00adholder. An objective of this exception is to make it possible to connect all components of a computer system, including those of different manufacturers, so that they can work together. Such an exception to the author's exclusive rights may not be used in a way which prejudices the legitimate interests of the rightholder or which conflicts with a normal exploitation of the program.\n</blockquote>\n\n== See also ==\n{{colbegin|3}}\n* [[Antikythera mechanism]]\n* [[Benchmarking]]\n* [[Bus analyzer]]\n* [[Chonda]]\n* [[Clone (computing)]]\n* [[Clean room design]]\n* [[coordinate-measuring machine|CMM]]\n* [[Code morphing]]\n* [[Connectix Virtual Game Station]]\n* [[Cryptanalysis]]\n* [[Decompiler]]\n* [[Deformulation]]\n* [[Digital Millennium Copyright Act]] (DMCA)\n* [[Forensic engineering]]\n* [[Industrial CT scanning]]\n* [[Interactive Disassembler]]\n* [[Knowledge Discovery Metamodel]]\n* [[3d scanner#Triangulation|Laser scanner]]\n* [[List of production topics]]\n* [[Listeroid#Listeroid engines|Listeroid Engines]]\n* [[Logic analyzer]]\n* [[Paycheck (film)]]\n* ''[[Sega v. Accolade]]''\n* [[Software archaeology]]\n* [[3d scanner#Structured light|Structured light digitizer]]\n* [[Value engineering]]\n{{colend}}\n\n== References ==\n{{Reflist|2}}\n\n==Further reading==\n*Yurichev, Dennis, \"An Introduction To Reverse Engineering for Beginners\". Online book: http://yurichev.com/writings/RE_for_beginners-en.pdf\n*{{Cite book |title=[[Reversing: Secrets of Reverse Engineering]] |last=Eilam |first=Eldad |year=2005 |publisher=[[Wiley Publishing]] |isbn=0-7645-7481-7 |page=595 }}\n*{{cite web |url=http://electronicdesign.com/Articles/Index.cfm?AD=1&ArticleID=11966 |author=James, Dick |title=Reverse Engineering Delivers Product Knowledge; Aids Technology Spread |accessdate=2009-02-03 |work=Electronic Design |publisher=Penton Media, Inc |date=January 19, 2006 }}\n*{{Cite book |title=Reverse Engineering \u2013 An Industrial Perspective |last=Raja |first=Vinesh |coauthors=Fernandes, Kiran J. |year=2008 |publisher = [[Springer Science+Business Media|Springer]] |isbn=978-1-84628-855-5 |page=242}}\n*{{cite web |url=http://ewh.ieee.org/r5/denver/sscs/References/2007_09_Torrance.pdf |author=Thumm, Mike |title=Talking Tactics |accessdate=2009-02-03 |work=IEEE 2007 Custom Integrated Circuits Conference (CICC) |publisher=IEEE, Inc |year=2007 }}\n*{{cite web |url=http://www.reversingproject.info |author=Cipresso, Teodoro |title=Software Reverse Engineering Education |accessdate=2009-08-22 |work=SJSU Master's Thesis |publisher=ProQuest UML |year=2009 }}\n*{{Cite book |title=[[Undocumented DOS: A Programmer's Guide to Reserved MS-DOS Functions and Data Structures, 2nd ed.]] |last=[[Schulman et al.]] |first=Andrew |year=1994 |publisher=[[Addison Wesley]] |isbn=0-201-63287-X }} (pp.&nbsp;229\u2013241 on general methodology of reverse engineering, applied to mass-market software: a program for exploring DOS, disassembling DOS)\n*{{Cite book |title=[[Undocumented Windows: A Programmer's Guide to Reserved Microsoft Windows API Functions]] |last=[[Schulman et al.]] |first=Andrew |year=1992 |publisher=[[Addison Wesley]] |isbn=0-201-60834-0 }} (pp.&nbsp;59\u2013188 on general methodology of reverse engineering, applied to mass-market software: examining Windows executables, disassembling Windows, tools for exploring Windows)\n*{{Cite book |title=[[Reverse Engineering: Mechanisms, Structures, Systems & Materials]] |last=Messler |first=Robert |year=2013 |publisher=[[McGraw Hill]] |isbn=978-0071825160 }} (introduction to hardware teardowns, including methodology, goals)\n*{{Cite book |title=[[Hacking the Xbox: An Introduction to Reverse Engineering]] |last=Huang |first=[[Andrew \"bunnie\"]] |year=2003 |publisher=[[No Starch Press]] |isbn=978-1593270292 }}\n*Pamela Samuelson and Suzanne Scotchmer, \"The Law and Economics of Reverse Engineering,\" 111 Yale L.J. 1575 (2002). Online: http://people.ischool.berkeley.edu/~pam/papers/l&e%20reveng3.pdf\n*Andrew Schulman, \u201cHiding in Plain Sight: Using Reverse Engineering to Uncover Software Patent Infringement,\" ''Intellectual Property Today'', Nov. 2010. Online: http://www.iptoday.com/issues/2010/11/hiding-in-plain-sight-using-reverse-engineering-to-uncover-software-patent-infringement.asp\n*Andrew Schulman, \u201cOpen to Inspection: Using Reverse Engineering to Uncover Software Prior Art,\u201d ''New Matter'' (Calif. State Bar IP Section), Summer 2011 (Part 1); Fall 2011 (Part 2). Online: http://www.SoftwareLitigationConsulting.com\n*Henry Heines, \"Determining Infringement by X-Ray Diffraction,\" ''Chemical Engineering Process'', Jan. 1999 (example of reverse engineering used to detect IP infringement)\n*Julia Elvidge, \"Using Reverse Engineering to Discover Patent Infringement,\" Chipworks, Sept. 2010. Online: http://www.photonics.com/Article.aspx?AID=44063\n\n==External links==\n{{wikibooks}}\n{{commons category}}\n<!--======================== {{No more links}} ============================\n    | PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. Wikipedia  |\n    | is not a collection of links nor should it be used for advertising. |\n    |                                                                     |\n    |           Excessive or inappropriate links WILL BE DELETED.         |\n    | See [[Wikipedia:External links]] & [[Wikipedia:Spam]] for details.  |\n    |                                                                     |\n    | If there are already plentiful links, please propose additions or   |\n    | replacements on this article's discussion page, or submit your link |\n    | to the relevant category at the Open Directory Project (dmoz.org)   |\n    | and link back to that category using the {{dmoz}} template.         |\n    ======================= {{No more links}} =============================-->\n*[http://www.npd-solutions.com/reoverview.html What Is Reverse Engineering]\n* [https://github.com/jcdutton/libbeauty An Open Source Reverse Engineering tool for Linux]\n* [http://revenge.berlios.de/ An Open Source Reverse Engineering tools and ideas for Linux]\n* [https://sourceforge.net/projects/javacalltracer/ Java Call Trace to UML Sequence Diagram] A reverse engineering tool for Java. This tool helps one to reverse engineer UML Sequence Diagram for their Java program at runtime. It works well with both complex Java programs (that have multiple threads) and J2EE applications deployed on Application Servers.\n* [http://case-tools.org/reverse_engineering.html CASE Tools for Reverse Code Engineering]\n* [http://www.imagix.com/links/reverse_engineering.html Additional tutorials, bibliographies and related sites] for reverse engineering of available source code.\n* [http://www.codeproject.com/Articles/30815/An-Anti-Reverse-Engineering-Guide Anti-Reverse Engineering Guide]\n* [http://www.owasp.org/index.php/OWASP_Reverse_Engineering_and_Code_Modification_Prevention_Project#tab=Overview OWASP Reverse Engineering and Code Modification Prevention Project]\n{{Technology}}\n\n{{DEFAULTSORT:Reverse Engineering}}\n[[Category:Computer security]]\n[[Category:Engineering concepts]]\n[[Category:Espionage]]\n[[Category:Patent law]]\n[[Category:Production and manufacturing]]\n[[Category:Articles with inconsistent citation formats]]", "timestamp": "2014-02-11T02:25:29Z", "contentformat": "text/x-wiki", "revid": 594919825, "contentmodel": "wikitext", "user": "EmausBot", "parentid": 593825916}], "title": "Reverse engineering"}}}}
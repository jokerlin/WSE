{"batchcomplete": "", "query": {"pages": {"18935488": {"ns": 0, "pageid": 18935488, "revisions": [{"comment": "/* Reverse engineering of machines */", "*": "'''Reverse engineering''' is the [[process (engineering)|process]] of discovering the technological principles of a device, object or system through analysis of its structure, [[function]] and operation. It often involves taking something (e.g., a [[machine|mechanical device]], [[electronic component]], or [[software]] program) apart and analyzing its workings in detail to be used in maintenance, or to try to make a new device or program that does the same thing without using or simply duplicating (without understanding) any part of the original.\n\nReverse engineering has its origins in the analysis of hardware for commercial or military advantage.<ref>{{Cite journal |doi=10.1109/52.43044 |first=E. J. |last=Chikofsky |lastauthoramp=yes |first2=J. H., II |last2=Cross |title=Reverse Engineering and Design Recovery: A Taxonomy |journal=IEEE Software |volume=7 |issue=1 |pages=13\u201317 |year=1990 |postscript=<!-- Bot inserted parameter. Either remove it; or change its value to \".\" for the cite to end in a \".\", as necessary. --> }}.</ref> The purpose is to deduce design decisions from end products with little or no additional knowledge about the procedures involved in the original production. The same techniques are subsequently being researched for application to legacy software systems, not for industrial or defence ends, but rather to replace incorrect, incomplete, or otherwise unavailable documentation.<ref>A Survey of Reverse Engineering and Program Comprehension. Michael L. Nelson, April 19, 1996, ODU CS 551 - Software Engineering Survey</ref>\n\n==Motivation==\nReasons for reverse engineering:\n* [[Interoperability]].\n* Lost documentation: Reverse engineering often is done because the documentation of a particular device has been lost (or was never written), and the person who built it is no longer available.  [[Integrated circuit]]s often seem to have been designed on obsolete, proprietary systems, which means that the only way to incorporate the functionality into new technology is to reverse-engineer the existing chip and then re-design it.\n* Product analysis.  To examine how a product works, what components it consists of, estimate costs, and identify potential [[patent infringement]].\n* Digital update/correction. To update the digital version (e.g. [[CAD]] model) of an object to match an \"as-built\" condition.\n* Security auditing.\n* Acquiring sensitive data by disassembling and analysing the design of a system component.<ref name=rfc2828>Internet Engineering Task Force RFC 2828 Internet Security Glossary</ref>\n* Military or commercial [[espionage]]. Learning about an enemy's or competitor's latest research by stealing or capturing a prototype and dismantling it.\n* Removal of [[copy protection]], circumvention of access restrictions.\n* Creation of unlicensed/unapproved duplicates.\n* Materials harvesting, sorting, or scrapping.<ref>http://scrappingmetal.blogspot.com/2010/10/reverse-engineering.html</ref>\n* Academic/learning purposes.\n* Curiosity.\n* Competitive technical intelligence (understand what your competitor is actually doing versus what they say they are doing).\n* Learning: learn from others' mistakes. Do not make the same mistakes that others have already made and subsequently corrected.\n\n==Reverse engineering of machines==\nAs [[computer-aided design]] (CAD) has become more popular, reverse engineering has become a viable method to create a 3D virtual model of an existing physical part for use in 3D CAD, [[Computer-aided manufacturing|CAM]], [[computer-aided engineering|CAE]] or other software.<ref>T. Varady, R. R. Martin, J. Cox, Reverse Engineering of Geometric Models\u2014An Introduction, Computer Aided Design 29 (4), 255-268, 1997.</ref> The reverse-engineering process involves measuring an object and then reconstructing it as a 3D model.  The physical object can be measured using [[3D scanner|3D scanning]] technologies like [[coordinate-measuring machine|CMMs]], [[3d scanner#Triangulation|laser scanners]], [[3d scanner#Structured light|structured light digitizer]]s or [[Industrial CT Scanning]] (computed tomography).  The measured data alone, usually represented as a [[point cloud]], lacks topological information and is therefore often processed and modeled into a more usable format such as a triangular-faced mesh, a set of [[Nonuniform rational B-spline|NURBS]] surfaces or a [[computer assisted design|CAD]] model.\n\nReverse engineering is also used by businesses to bring existing physical geometry into digital product development environments, to make a digital 3D record of their own products or to assess competitors' products. It is used to analyse, for instance, how a product works, what it does, and what components it consists of, estimate costs, and identify potential [[patent]] infringement, etc.\n\n[[Value engineering]] is a related activity also used by businesses. It involves de-constructing and analysing products, but the objective is to find opportunities for cost cutting.\n\n==Reverse engineering of software==\nThe term ''reverse engineering'' as applied to software means different things to different people, prompting Chikofsky and Cross to write a paper researching the various uses and defining a [[taxonomy]]. From their paper, they state, \"Reverse engineering is the process of analyzing a subject system to create representations of the system at a higher level of abstraction.\"<ref>{{cite journal | last=Chikofsky | first=E.J. | coauthors=J.H. Cross II | year=1990 | month=January | title=Reverse Engineering and Design Recovery: A Taxonomy in IEEE Software | journal=IEEE Computer Society | pages=13\u201317}}</ref> It can also be seen as \"going backwards through the development cycle\".<ref>{{cite book | last=Warden | first=R. | title=Software Reuse and Reverse Engineering in Practice | year=1992 | publisher=Chapman & Hall | location=London, England | pages=283\u2013305}}</ref> In this model, the output of the implementation phase (in source code form) is reverse-engineered back to the analysis phase, in an inversion of the traditional [[waterfall model]]. Reverse engineering is a process of examination only: the software system under consideration is not modified (which would make it [[reengineering (software)|re-engineering]]). [[Software anti-tamper]] technology is used to deter both reverse engineering and re-engineering of proprietary software and software-powered systems. In practice, two main types of reverse engineering emerge. In the first case, source code is already available for the software, but higher-level aspects of the program, perhaps poorly documented or documented but no longer valid, are discovered. In the second case, there is no source code available for the software, and any efforts towards discovering one possible source code for the software are regarded as reverse engineering. This second usage of the term is the one most people are familiar with. Reverse engineering of software can make use of the [[clean room design]] technique to avoid copyright infringement.\n\nOn a related note, [[black box testing]] in [[software engineering]] has a lot in common with reverse engineering. The tester usually has the [[application programming interface|API]], but their goals are to find bugs and undocumented features by bashing the product from outside.\n\nOther purposes of reverse engineering include security auditing, removal of copy protection (\"[[software cracking|cracking]]\"), circumvention of access restrictions often present in [[consumer electronics]], customization of [[embedded systems]] (such as engine management systems), in-house repairs or retrofits, enabling of additional features on low-cost \"crippled\" hardware (such as some graphics card chip-sets), or even mere satisfaction of curiosity.\n\nThe [[Certified Reverse Engineering Analyst]] (CREA) is a certification provided by the IACRB that certifies candidates are proficient in reverse engineering software.\n\n===Binary software===\nThis process is sometimes termed ''Reverse Code Engineering'', or RCE.<ref>{{cite book | last=Chuvakin | first=Anton | coauthors=Cyrus Peikari | edition=1st | title=Security Warrior |accessdate=2006-05-25 | publisher=O'Reilly | year=2004 | month=January}}</ref> As an example, decompilation of binaries for the [[Java platform]] can be accomplished using Jad. One famous case of reverse engineering was the first non-[[International Business Machines|IBM]] implementation of the [[IBM PC|PC]] [[BIOS]] which launched the historic [[IBM PC compatible]] industry that has been the overwhelmingly dominant computer hardware platform for many years. An example of a group that reverse-engineers software for enjoyment is CORE which stands for \"Challenge Of Reverse Engineering\". Reverse engineering of software is protected in the U.S. by the [[fair use]] exception in [[copyright|copyright law]].<ref>See {{Cite journal |doi=10.2307/797533 |authorlink=Pamela Samuelson |first=Pamela |last=Samuelson |lastauthoramp=yes |first2=Suzanne |last2=Scotchmer |title=The Law and Economics of Reverse Engineering |volume=111 |journal=[[Yale Law Journal]] |issue= 7|pages=1575\u20131663 |year=2002 |url=http://www.yalelawjournal.org/the-yale-law-journal/content-pages/the-law-and-economics-of-reverse-engineering/ |postscript=<!-- Bot inserted parameter. Either remove it; or change its value to \".\" for the cite to end in a \".\", as necessary. --> |jstor=797533 }}.</ref> The [[Samba software]], which allows systems that are not running [[Microsoft Windows]] systems to share files with systems that are, is a classic example of software reverse engineering,<ref>{{cite web | title=Samba: An Introduction | url=http://www.samba.org/samba/docs/SambaIntro.html | date=2001-11-27 | accessdate=2009-05-07}}</ref> since the Samba project had to reverse-engineer unpublished information about how Windows file sharing worked, so that non-Windows computers could emulate it. The [[Wine (software)|Wine]] project does the same thing for the [[Windows API]], and [[OpenOffice.org]] is one party doing this for the [[Microsoft Office]] file formats. The [[ReactOS]] project is even more ambitious in its goals, as it strives to provide binary (ABI and API) compatibility with the current Windows OSes of the NT branch, allowing software and drivers written for Windows to run on a clean-room reverse-engineered [[GPL]] free software or open-source counterpart.\n\n====Binary software techniques====\nReverse engineering of software can be accomplished by various methods.\nThe three main groups of software reverse engineering are\n#Analysis through observation of information exchange, most prevalent in protocol reverse engineering, which involves using [[bus analyzer]]s and [[packet sniffer]]s, for example, for accessing a [[computer bus]] or [[computer network]] connection and revealing the traffic data thereon. Bus or network behavior can then be analyzed to produce a stand-alone implementation that mimics that behavior. This is especially useful for reverse engineering [[device driver]]s. Sometimes, reverse engineering on [[embedded system]]s is greatly assisted by tools deliberately introduced by the manufacturer, such as [[JTAG]] ports or other debugging means. In [[Microsoft Windows]], low-level debuggers such as [[SoftICE]] are popular.\n#[[Disassembly]] using a [[disassembler]], meaning the raw [[machine language]] of the program is read and understood in its own terms, only with the aid of machine-language [[mnemonic]]s. This works on any computer program but can take quite some time, especially for someone not used to machine code. The [[Interactive Disassembler]] is a particularly popular tool.\n#Decompilation using a [[decompiler]], a process that tries, with varying results, to recreate the source code in some high-level language for a program only available in machine code or [[bytecode]].\n\n==Source code==\nA number of [[Unified Modeling Language|UML]] tools refer to the process of importing and analysing source code to generate UML diagrams as \"reverse engineering\". See [[List of UML tools]].\n\n==Reverse engineering of protocols==\n\n[[Communications protocol|Protocols]] are sets of rules that describe message formats and how messages are exchanged (i.e., the protocol [[Finite-state machine|state-machine]]). Accordingly, the problem of protocol reverse-engineering can be partitioned into two subproblems; message format and state-machine reverse-engineering.\n\nThe message formats have traditionally been reverse-engineered through a tedious manual process, which involved analysis of how protocol implementations process messages, but recent research proposed a number of automatic solutions <ref>W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic protocol reverse engineering from network traces. In Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium, pages 1-14.</ref><ref>W. Cui, M. Peinado, K. Chen, H. J. Wang, and L. Ir\u00fan-Briz. Tupni: Automatic reverse engineering of input formats. In Proceedings of the 15th ACM Conference on Computer and Communications Security, pages 391-402. ACM, Oct 2008.</ref><ref name=\"M. Comparetti, G. Wondracek pages 110-125\">P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda. Prospex: Protocol specification extraction. In Proceedings of the 2009 30th IEEE Symposium on Security and Privacy, pages 110-125, Washington, 2009. IEEE Computer Society.</ref>. Typically, these automatic approaches either group observed messages into clusters using various [[Cluster analysis|clustering analyses]], or emulate the protocol implementation tracing the message processing.\n\nThere has been less work on reverse-engineering of state-machines of protocols. In general, the protocol state-machines can be learned either through a process of [[offline learning]], which passively observes communication and attempts to build the most general state-machine accepting all observed sequnces of messages, and [[online learning]], which allows interactive generation of probing sequences of messages and listening to responses to those probing sequences. In general, offline learning of small state-machines is known to be [[NP-complete]] <ref>E. M. Gold. Complexity of automaton identification from given data. Information and Control, 37(3):302-320, 1978.</ref>, while online learning can be done in polynomial time <ref>D. Angluin. Learning regular sets from queries and counterexamples. Information and Computation, 75(2):87-106, 1987.</ref>. An automatic offline approach has been demonstrated by Comparetti at al.<ref name=\"M. Comparetti, G. Wondracek pages 110-125\"/>. and an online approach very recently by Cho et al.<ref>C.Y. Cho, D. Babic, R. Shin, and D. Song. [http://www.domagoj-babic.com/index.php/Pubs/CCS10botnets Inference and Analysis of Formal Models of Botnet Command and Control Protocols], 2010 ACM Conference on Computer and Communications Security.</ref>.\n\nOther components of typical protocols, like encryption and hash functions, can be reverse-engineered automatically as well. Typically, the automatic approaches trace the execution of protocol implementations and try to detect buffers in memory holding unencrpyted packets <ref>[http://bitblaze.cs.berkeley.edu/papers/polyglot_ccs07_av.pdf   Polyglot: automatic extraction of protocol message format using dynamic binary analysis]. J. Caballero, H. Yin, Z. Liang, and D. Song. Proceedings of the 14th ACM conference on Computer and communications security, p. 317-329.</ref>.\n\n==Reverse engineering of integrated circuits/smart cards==\nReverse engineering is an invasive and destructive form of analyzing a smart card. The attacker grinds away layer by layer of the smart card and takes pictures with an electron microscope. With this technique, it is possible to reveal the complete hardware and software part of the smart card. The major problem for the attacker is to bring everything into the right order to find out how everything works. Engineers try to hide keys and operations by mixing up memory positions, for example, [[busscrambling]].<ref>Wolfgang Rankl, Wolfgang Effing, Smart Card Handbook (2004)</ref><ref>T. Welz: Smart cards as methods for payment (2008), Seminar ITS-Security Ruhr-Universit\u00e4t Bochum, \"http://www.crypto.rub.de/its_seminar_ws0708.html\"</ref>\nIn some cases, it is even possible to attach a probe to measure voltages while the smart card is still operational. Engineers employ sensors to detect and prevent this attack.<ref>David C. Musker: Protecting & Exploiting Intellectual Property in Electronics, IBC Conferences, 10 June 1998</ref> This attack is not very common because it requires a large investment in effort and special equipment that is generally only available to large chip manufacturers. Furthermore, the payoff from this attack is low since other security techniques are often employed such as shadow accounts.\n\n==Reverse engineering for military applications==\nReverse engineering is often used by militaries in order to copy other nations' technologies, devices or information that have been obtained by regular troops in the fields or by [[military intelligence|intelligence]] operations. It was often used during the [[Second World War]] and the [[Cold War]]. Well-known examples from WWII and later include\n* [[Jerry can]]: British and American forces noticed that the Germans had gasoline cans with an excellent design.  They reverse-engineered copies of those cans.  The cans were popularly known as \"Jerry cans\".\n* [[Tupolev Tu-4]]: Three American [[B-29 Superfortress|B-29]] bombers on missions over [[Japan]] were forced to land in the [[Soviet Union|USSR]].  The Soviets, who did not have a similar strategic bomber, decided to copy the B-29.  Within a few years, they had developed the Tu-4, a near-perfect copy.\n* [[V2 Rocket]]:  Technical documents for the V2 and related technologies were captured by the Western Allies at the end of the war.  Soviet and captured German engineers had to reproduce technical documents and plans, working from captured hardware, in order to make their clone of the rocket, the [[R-1 (missile)|R-1]], which began the postwar Soviet rocket program that led to the [[R-7 Semyorka|R-7]] and the beginning of the [[space race]].\n* [[Vympel K-13|K-13/R-3S]] missile ([[NATO reporting name]] '''AA-2 Atoll'''), a Soviet reverse-engineered copy of the [[AIM-9 Sidewinder]], made possible after a Taiwanese AIM-9B hit a Chinese [[MiG-17]] without exploding; amazingly, the missile became lodged within the airframe, the pilot returning to base with what Russian scientists would describe as a university course in missile development.\n* [[BGM-71 TOW]] Missile: In May 1975, negotiations between Iran and Hughes Missile Systems on co-production of the TOW and Maverick missiles stalled over disagreements in the pricing structure, the subsequent [[1979 revolution]] ending all plans for such co-production. Iran was later successful in reverse-engineering the missile and are currently producing their own copy: the [[Toophan]].\n* China has reversed engineered many examples of Western and Russian hardware, from fighter aircraft to missiles and [[HMMWV]] cars.\n\n==Legality==\n{{globalize}}\nIn the United States even if an artifact or process is protected by [[trade secret]]s, reverse-engineering the artifact or process is often lawful as long as it is obtained legitimately.<ref>http://www.memagazine.org/contents/current/features/trade101/trade101.html</ref> [[Patent]]s, on the other hand, need a public disclosure of an [[invention]], and therefore, patented items do not necessarily have to be reverse-engineered to be studied. (However, an item produced under one or more patents could also include other technology that is not patented and not disclosed.) One common motivation of reverse engineers is to determine whether a competitor's product contains [[patent infringement]]s or [[copyright infringement]]s.\n\nThe reverse engineering of software in the US is generally illegal because most [[EULA]] prohibit it, and courts have found such contractual prohibitions to override the copyright law; see [[Bowers v. Baystate Technologies]].<ref>http://www.utsystem.edu/ogc/intellectualproperty/baystatevbowersdiscussion.htm</ref><ref>http://www.infoworld.com/d/developer-world/contract-case-could-hurt-reverse-engineering-337</ref> Article 6 of the 1991 EU [[Computer Programs Directive]] allows reverse engineering for the purposes of interoperability, but prohibits it for the purposes of creating a competing product, and also prohibits the public release of information obtained though reverse engineering of software.<ref>http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:31991L0250:EN:HTML</ref><ref>http://books.google.com/books?id=KJmNGglq0nwC&pg=PA321&lpg=PA321&dq=e+European+Software+Directive+reverse+engineering&source=bl&ots=D-fjaWSI4Y&sig=47VJ-tdmg8abUjEjEtvYueC4WKU&hl=en&ei=SIGITJDxI8GLswa4kpScCg&sa=X&oi=book_result&ct=result&resnum=3&ved=0CBwQ6AEwAg#v=onepage&q=e%20European%20Software%20Directive%20reverse%20engineering&f=false</ref><ref>http://www.jenkins.eu/articles-general/reverse-engineering.asp#a9</ref>\n\n== See also ==\n* [[Antikythera mechanism]]\n* [[Benchmarking]]\n* [[Bus analyzer]]\n* [[Chonda]]\n* [[Clean room design]]\n* [[Code morphing]]\n* [[Connectix Virtual Game Station]]\n* [[Decompiler]]\n* [[Digital Millennium Copyright Act]] (DMCA)\n* [[Forensic engineering]]\n* [[Interactive Disassembler]]\n* [[Knowledge Discovery Metamodel]]\n* [[List of production topics]]\n* [[Logic analyzer]]\n* [[Paycheck (film)]]\n* [[Value engineering]]\n* [[Cryptanalysis]]\n* [[Software archaeology]]\n\n== References ==\n{{reflist}}\n\n==Further reading==\n*{{cite book |title=[[Reversing: Secrets of Reverse Engineering]] |last=Eilam |first=Eldad |year=2005 |publisher=[[Wiley Publishing]] |isbn=0764574817 |pages=595 }}\n*{{cite web |url=http://electronicdesign.com/Articles/Index.cfm?AD=1&ArticleID=11966 |author=James, Dick |title=Reverse Engineering Delivers Product Knowledge; Aids Technology Spread |accessdate=2009-02-03 |work=Electronic Design |publisher=Penton Media, Inc |date=January 19, 2006 }}\n*{{cite book |title=Reverse Engineering - An Industrial Perspective  |last=Raja |first=Vinesh |coauthors=Fernandes, Kiran J. |year=2008 |publisher = [[Springer Science+Business Media|Springer]] |isbn=978-1-84628-855-5 |pages=242}}\n*{{cite web |url=http://ewh.ieee.org/r5/denver/sscs/References/2007_09_Torrance.pdf |author=Thumm, Mike |title=Talking Tactics |accessdate=2009-02-03 |work=IEEE 2007 Custom Integrated Circuits Conference (CICC) |publisher=IEEE, Inc |year=2007 }}\n*{{cite web |url=http://www.reversingproject.info |author=Cipresso, Teodoro |title=Software Reverse Engineering Education |accessdate=2009-08-22 |work=SJSU Master's Thesis |publisher=ProQuest UML |year=2009 }}\n\n==External links==\n{{wikibooks}}\n<!--===========================({{NoMoreLinks}})===============================\n    | PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. WIKIPEDIA IS   |\n    | NOT A COLLECTION OF LINKS.                                              |\n    |                                                                         | \n    |               Excessive or inappropriate links WILL BE DELETED.         |\n    |  See [[Wikipedia:External links]] and [[Wikipedia:Spam]] for details.   |\n    |                                                                         | \n    | If there are already plentiful links, please propose additions or       |\n    | replacements on this article's discussion page.  Or submit your link    |\n    | to the appropriate category at the Open Directory Project (www.dmoz.org)|\n    | and link back to that category using the {{dmoz}} template.             |\n    ===========================({{NoMoreLinks}})===============================-->\n* [https://sourceforge.net/projects/javacalltracer/ Java Call Trace to UML Sequence Diagram] A reverse engineering tool for Java. This tool helps you to reverse engineer UML Sequence Diagram for your java program at runtime. It works well with both complex java programs (that have multiple threads) and J2EE applications deployed on Application Servers.\n* [http://case-tools.org/reverse_engineering.html CASE Tools for Reverse Code Engineering]\n* [http://community.reverse-engineering.net/ The Reverse Code Engineering Community]\n\n{{DEFAULTSORT:Reverse Engineering}}\n[[Category:Articles with inconsistent citation formats]]\n[[Category:Engineering concepts]]\n[[Category:Production and manufacturing]]\n[[Category:Computer security]]\n[[Category:Patent law]]\n\n[[ar:\u0647\u0646\u062f\u0633\u0629 \u0639\u0643\u0633\u064a\u0629]]\n[[ca:Enginyeria inversa]]\n[[cs:Zp\u011btn\u00e9 in\u017een\u00fdrstv\u00ed]]\n[[da:Reverse engineering]]\n[[de:Reverse Engineering]]\n[[es:Ingenier\u00eda inversa]]\n[[fa:\u0645\u0647\u0646\u062f\u0633\u06cc \u0645\u0639\u06a9\u0648\u0633]]\n[[fr:R\u00e9tro-ing\u00e9nierie]]\n[[ko:\ub9ac\ubc84\uc2a4 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1]]\n[[it:Reingegnerizzazione]]\n[[he:\u05d4\u05e0\u05d3\u05e1\u05d4 \u05d4\u05e4\u05d5\u05db\u05d4]]\n[[kn:\u0ca4\u0c82\u0ca4\u0ccd\u0cb0\u0c9c\u0ccd\u0c9e\u0cbe\u0ca8\u0ca6 \u0cae\u0cc2\u0cb2\u0ca4\u0ca4\u0ccd\u0cb5\u0ca6 \u0c86\u0cb5\u0cbf\u0cb7\u0ccd\u0c95\u0cbe\u0cb0 (\u0cb0\u0cbf\u0cb5\u0cb0\u0ccd\u0cb8\u0ccd \u0c87\u0c82\u0c9c\u0cbf\u0ca8\u0cbf\u0caf\u0cb0\u0cbf\u0c82\u0c97\u0ccd)]]\n[[ml:\u0d31\u0d3f\u0d35\u0d47\u0d34\u0d4d\u0d38\u0d4d\u200c \u0d0e\u0d1e\u0d4d\u0d1a\u0d3f\u0d28\u0d40\u0d2f\u0d31\u0d3f\u0d02\u0d17\u0d4d\u200c]]\n[[ms:Kejuruteraan undur]]\n[[nl:Reverse engineering]]\n[[ja:\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0]]\n[[pl:In\u017cynieria odwrotna]]\n[[pt:Engenharia reversa]]\n[[ro:Inginerie invers\u0103]]\n[[ru:\u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430]]\n[[fi:Takaisinmallinnus]]\n[[sv:Reverse engineering]]\n[[ta:\u0baa\u0bbf\u0ba9\u0bcd\u0ba9\u0bcb\u0b95\u0bcd\u0b95\u0bc1\u0baa\u0bcd \u0baa\u0bca\u0bb1\u0bbf\u0baf\u0bbf\u0baf\u0bb2\u0bcd]]\n[[th:\u0e27\u0e34\u0e28\u0e27\u0e01\u0e23\u0e23\u0e21\u0e1c\u0e31\u0e19\u0e01\u0e25\u0e31\u0e1a]]\n[[tr:Tersine m\u00fchendislik]]\n[[uk:\u0417\u0432\u043e\u0440\u043e\u0442\u043d\u0430 \u0440\u043e\u0437\u0440\u043e\u0431\u043a\u0430]]\n[[vi:K\u1ef9 ngh\u1ec7 \u0111\u1ea3o ng\u01b0\u1ee3c]]\n[[zh:\u9006\u5411\u5de5\u7a0b]]", "timestamp": "2010-11-17T19:20:27Z", "contentformat": "text/x-wiki", "revid": 397356768, "contentmodel": "wikitext", "user": "Massestephanie", "parentid": 396144748}], "title": "Reverse engineering"}}}}